===================== [value printing: strings] =====================
Assertion failed at integration/integration.cpp:131: void test_class<T>::something_else() [with T = int]:
    assert(s == "test");
    Where:
        s => "test\n"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:132
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:132: void test_class<T>::something_else() [with T = int]:
    assert(s[i] == 'c', ...);
    Where:
        s[i] => 't'
    Extra diagnostics:
        s => "test\n"
        i => 0

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:133
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:135: void test_class<T>::something_else() [with T = int]:
    assert(buffer == thing);
    Where:
        buffer => nullptr
        thing  => "foo"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:136
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:136: void test_class<T>::something_else() [with T = int]:
    assert(buffer == +thing);
    Where:
        buffer => nullptr
        +thing => "foo"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:137
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:138: void test_class<T>::something_else() [with T = int]:
    assert(s == sv);
    Where:
        s  => "test\n"
        sv => "foo"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:129
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value printing: pointers] =====================
Assertion failed at integration/integration.cpp:143: void test_class<T>::something_else() [with T = int]:
    assert((uintptr_t)-1 == 0xff);
    Where:
        (uintptr_t)-1 =>  18446744073709551615  0xffffffffffffffff
        0xff          =>  255                   0xff

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:144
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:144: void test_class<T>::something_else() [with T = int]:
    assert((uintptr_t)-1 == (uintptr_t)0xff);
    Where:
        (uintptr_t)-1   => 18446744073709551615
        (uintptr_t)0xff => 255

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:145
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:146: void test_class<T>::something_else() [with T = int]:
    assert(foo == nullptr);
    Where:
        foo => 0xdeadbeef

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:146
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value printing: number formats] =====================
Assertion failed at integration/integration.cpp:153: void test_class<T>::something_else() [with T = int]:
    assert(mask bitand flags);
    Where:
        mask  =>  405  0b0000000110010101
        flags =>  42   0b0000000000101010

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:154
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:154: void test_class<T>::something_else() [with T = int]:
    assert(0xf == 16);
    Where:
        0xf =>  15  0xf
        16  =>  16  0x10

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:154
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value printing: floating point] =====================
Assertion failed at integration/integration.cpp:159: void test_class<T>::something_else() [with T = int]:
    assert(1 == 1.5);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:160
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:160: void test_class<T>::something_else() [with T = int]:
    assert(0.5 != .5);
    Where:
        .5 => 0.5

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:161
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:161: void test_class<T>::something_else() [with T = int]:
    assert(0.1 + 0.2 == 0.3);
    Where:
        0.1 + 0.2 => 0.30000000000000004
        0.3       => 0.29999999999999999

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:162
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Verification failed at integration/integration.cpp:162: void test_class<T>::something_else() [with T = int]:
    VERIFY(.1 + .2 == .3);
    Where:
        .1 + .2 => 0.30000000000000004
        .3      => 0.29999999999999999

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:163
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:165: void test_class<T>::something_else() [with T = int]:
    assert(ff == .1);
    Where:
        ff => 0.100000001
        .1 => 0.10000000000000001

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:166
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:166: void test_class<T>::something_else() [with T = int]:
    assert(.1f == .1);
    Where:
        .1f => 0.100000001
        .1  => 0.10000000000000001

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:166
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value printing: ostream overloads] =====================
Assertion failed at integration/integration.cpp:172: void test_class<T>::something_else() [with T = int]:
    assert(p == printable{2.55});
    Where:
        p               => (printable = 1.42)
        printable{2.55} => (printable = 2.55)

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:172
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value printing: no ostream overload] =====================
Assertion failed at integration/integration.cpp:178: void test_class<T>::something_else() [with T = int]:
    assert(p == not_printable{2.55});
    Where:
        p                   => <instance of not_printable<double>>
        not_printable{2.55} => <instance of not_printable<double>>

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:178
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:179: void test_class<T>::something_else() [with T = int]:
    assert(p.f == not_printable{2.55}.f);
    Where:
        p.f                   => <instance of std::optional<double>>
        not_printable{2.55}.f => <instance of std::optional<double>>

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:179
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [optional messages] =====================
Assertion failed at integration/integration.cpp:185: void test_class<T>::something_else() [with T = int]:
    assert(false, ...);
    Extra diagnostics:
        2 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:185
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:186: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:187
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:187: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:187
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:188: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:188
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:189: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:189
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:190: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        2 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:190
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:191: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        2 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:191
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:192: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        2 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:192
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:193: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        2 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:193
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [errno] =====================
Assertion failed at integration/integration.cpp:199: void test_class<T>::something_else() [with T = int]:
    assert(false, ...);
    Extra diagnostics:
        errno =>  2 "No such file or directory"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:200
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:201: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        errno =>  2 "No such file or directory"

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:204
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [general] =====================
bar() called
foo() called
Assertion failed at integration/integration.cpp:206: void test_class<T>::something_else() [with T = int]: foo
    assert(false, ...);
    Extra diagnostics:
        false           => false
        2 * foo()       => 4
        "foobar"sv      => "foobar"
        bar()           => -2
        printable{2.55} => (printable = 2.55)

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:206
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [safe comparisons] =====================
Assertion failed at integration/integration.cpp:211: void test_class<T>::something_else() [with T = int]:
    assert(18446744073709551606ULL == -10);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:212
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:212: void test_class<T>::something_else() [with T = int]:
    assert(-1 > 1U);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:216
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [expression decomposition] =====================
Assertion failed at integration/integration.cpp:219: void test_class<T>::something_else() [with T = int]:
    assert(1 == (1 bitand 2));
    Where:
        (1 bitand 2) => 0

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:220
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:220: void test_class<T>::something_else() [with T = int]:
    assert(1 < 1 < 0);
    Where:
        1 < 1 => false

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:221
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:221: void test_class<T>::something_else() [with T = int]:
    assert(0 + 0 + 0);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:222
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:222: void test_class<T>::something_else() [with T = int]:
    assert(false == false == false);
    Where:
        false == false => true

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:223
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:223: void test_class<T>::something_else() [with T = int]:
    assert(1 << 1 == 200);
    Where:
        1 << 1 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:224
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:224: void test_class<T>::something_else() [with T = int]:
    assert(1 << 1 << 31);
    Where:
        1 << 1 => 2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:225
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:226: void test_class<T>::something_else() [with T = int]:
    assert(x -= 2);
    Where:
        x => 0

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:227
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:228: void test_class<T>::something_else() [with T = int]:
    assert(x -= x -= 1);
    Where:
        x      => 0
        x -= 1 => 0

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:229
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:230: void test_class<T>::something_else() [with T = int]:
    assert(x -= x -= x -= 1);
    Where:
        x           => 0
        x -= x -= 1 => 0

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:231
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Assertion failed at integration/integration.cpp:231: void test_class<T>::something_else() [with T = int]: pffft
    assert(true ? false : true, ...);

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:231
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [ensure values are only computed once] =====================
bar() called
foo() called
Assertion failed at integration/integration.cpp:236: void test_class<T>::something_else() [with T = int]:
    assert(foo() < bar());
    Where:
        foo() => 2
        bar() => -2

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:239
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value forwarding: copy / moves] =====================
logger_type::logger_type() [n=1]
logger_type::logger_type() [n=2]
logger_type::operator==(const logger_type&) [n=1, other=2]
Assertion failed at integration/integration.cpp:244: void test_class<T>::something_else() [with T = int]:
    assert(lt1 == lt2);
    Where:
        lt1 => logger_type [n = 1]
        lt2 => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:243
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::compl logger_type() [n=2]
logger_type::compl logger_type() [n=1]
--------------------------------------------

logger_type::logger_type() [n=2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::operator==(int, const logger_type&) [b=1, n=2]
logger_type::logger_type(logger_type&&) [n=2]
Assertion failed at integration/integration.cpp:248: void test_class<T>::something_else() [with T = int]:
    assert(1 == logger_type(2));
    Where:
        logger_type(2) => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:248
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=2]
--------------------------------------------

logger_type::logger_type() [n=1]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::operator==(const logger_type&, int) [n=1, b=2]
logger_type::logger_type(logger_type&&) [n=1]
Assertion failed at integration/integration.cpp:252: void test_class<T>::something_else() [with T = int]:
    assert(logger_type(1) == 2);
    Where:
        logger_type(1) => logger_type [n = 1]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:252
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::logger_type(logger_type&&) [n=1]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::compl logger_type() [n=1]
logger_type::compl logger_type() [n=-2]
--------------------------------------------

logger_type::logger_type() [n=2]
logger_type::logger_type() [n=1]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::operator==(const logger_type&) [n=1, other=2]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=2]
Assertion failed at integration/integration.cpp:256: void test_class<T>::something_else() [with T = int]:
    assert(logger_type(1) == logger_type(2));
    Where:
        logger_type(1) => logger_type [n = 1]
        logger_type(2) => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:256
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=1]
logger_type::compl logger_type() [n=2]
logger_type::compl logger_type() [n=-2]
Verification failed at integration/integration.cpp:257: void test_class<T>::something_else() [with T = int]:
    VERIFY(!(std::is_same<decltype(r), logger_type>::value));

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:258
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


Verification failed at integration/integration.cpp:258: void test_class<T>::something_else() [with T = int]:
    VERIFY(r.n != 1);
    Where:
        r.n => 1

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:256
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::compl logger_type() [n=1]
--------------------------------------------

===================== [value forwarding: lvalue references] =====================
logger_type::logger_type() [n=2]
logger_type::operator==(const logger_type&, int) [n=2, b=2]
Assertion failed at integration/integration.cpp:306: decltype(auto) test_class<T>::get_lt_a(logger_type&) [with T = int]:
    assert(l == 2);
    Where:
        l => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::get_lt_a(logger_type&)
      at integration.cpp:306
# 2 test_class<int>::something_else()
      at integration.cpp:269
# 3 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 4 main
      at integration.cpp:319


logger_type::operator==(const logger_type&, int) [n=3, b=1]
Assertion failed at integration/integration.cpp:271: void test_class<T>::something_else() [with T = int]:
    assert(lt == 1);
    Where:
        lt => logger_type [n = 3]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:272
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::operator==(const logger_type&, int) [n=3, b=1]
Assertion failed at integration/integration.cpp:272: void test_class<T>::something_else() [with T = int]:
    assert(x == 1);
    Where:
        x => logger_type [n = 3]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:268
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::compl logger_type() [n=3]
--------------------------------------------

Assertion failed at integration/integration.cpp:277: void test_class<T>::something_else() [with T = int]:
    assert(x ^= 1);
    Where:
        x =>  0  0b00000000000000000000000000000000
        1 =>  1  0b00000000000000000000000000000001

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:277
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


===================== [value forwarding: rvalues] =====================
logger_type::logger_type() [n=2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::operator==(const logger_type&, int) [n=2, b=2]
logger_type::logger_type(logger_type&&) [n=2]
Assertion failed at integration/integration.cpp:310: decltype(auto) test_class<T>::get_lt_b() [with T = int]:
    assert(logger_type(2) == 2);
    Where:
        logger_type(2) => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::get_lt_b()
      at integration.cpp:310
# 2 test_class<int>::something_else()
      at integration.cpp:287
# 3 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 4 main
      at integration.cpp:319


logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
logger_type::logger_type(logger_type&&) [n=2]
logger_type::compl logger_type() [n=-2]
Assertion failed at integration/integration.cpp:287: void test_class<T>::something_else() [with T = int]:
    assert(false, ...);
    Extra diagnostics:
        x => logger_type [n = 2]

Stack trace:
# 1 test_class<int>::something_else()
      at integration.cpp:286
# 2 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 3 main
      at integration.cpp:319


logger_type::compl logger_type() [n=2]
--------------------------------------------

===================== [simple recursion] =====================
Assertion failed at integration/integration.cpp:22: void rec(int):
    assert(false);

Stack trace:
# 1 rec(int)
      at integration.cpp:24
|                                   |
| 9 layers of recursion were folded |
|                                   |
#11 rec(int)
      at integration.cpp:24
#12 test_class<int>::something_else()
      at integration.cpp:297
#13 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
#14 main
      at integration.cpp:319


===================== [other recursion] =====================
Assertion failed at integration/integration.cpp:29: void recursive_a(int):
    assert(false);

Stack trace:
# 1 recursive_a(int)
      at integration.cpp:31
# 2 recursive_b(int)
      at integration.cpp:36
# 3 recursive_a(int)
      at integration.cpp:31
# 4 recursive_b(int)
      at integration.cpp:36
# 5 recursive_a(int)
      at integration.cpp:31
# 6 recursive_b(int)
      at integration.cpp:36
# 7 recursive_a(int)
      at integration.cpp:31
# 8 recursive_b(int)
      at integration.cpp:36
# 9 recursive_a(int)
      at integration.cpp:31
#10 recursive_b(int)
      at integration.cpp:36
#11 recursive_a(int)
      at integration.cpp:31
#12 test_class<int>::something_else()
      at integration.cpp:301
#13 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
#14 main
      at integration.cpp:319


===================== [Path differentiation] =====================
Assertion failed at integration/x/a.cpp:5: void test_path_differentiation_2():
    assert(false);

Stack trace:
# 1 test_path_differentiation_2()
      at x/a.cpp:6
# 2 test_path_differentiation()
      at integration/a.cpp:8
# 3 test_class<int>::something_else()
      at integration.cpp:303
# 4 void test_class<int>::something<N>(std::pair<N, int>)
      at integration.cpp:122
# 5 main
      at integration.cpp:319


